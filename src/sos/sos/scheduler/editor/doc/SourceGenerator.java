package sos.scheduler.editor.doc;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import sos.scheduler.editor.app.Options;




import com.sos.JSHelper.Basics.JSToolBox;
import com.sos.JSHelper.DataElements.JSDataElementDate;
import com.sos.JSHelper.DataElements.JSDateFormat;
import com.sos.JSHelper.io.Files.JSXMLFile;
import com.sos.VirtualFileSystem.FTP.FTPIllegalReplyException;
 

/**
* \class SourceGenerator 
* 
* \brief SourceGenerator - 
* 
* \details
*
* \section SourceGenerator.java_intro_sec Introduction
*
* \section SourceGenerator.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 29.09.2011
* \see reference
*
* Created on 29.09.2011 15:38:57
 */

public class SourceGenerator {

 	private final String	conClassName	= "SourceGenerator";
 
	private final String								conXsltParmExtendsClassName		= "ExtendsClassName";
	private final String								conXsltParmClassNameExtension	= "ClassNameExtension";
	private final String								conXsltParmVersion				= "version";
	private final String								conXsltParmSourceType			= "sourcetype";
	private final String								conXsltParmClassName			= "ClassName";
	private final String								conXsltParmWorkerClassName		= "WorkerClassName";
	private final String								conJavaFilenameExtension		= ".java";
	private File jobdocFile;
	private File outputDir;
	private String packageName;
	private String javaClassName;
    private File templatePath;




	private String defaultLang = "en";
	private boolean standAlone=true;
	
    private HashMap pobjHshMap;

	
	private static final Logger	logger			= Logger.getLogger(SourceGenerator.class);
	
	private void SourceGenerator() {

 	}

public void execute( )  {
	logger.setLevel(Level.DEBUG);
	 
	try {
 		//String strXMLFileName = "c:\\temp\\job.xml";
 		String strXMLFileName = jobdocFile.getCanonicalPath();

		JSXMLFile objXMLFile = new JSXMLFile(strXMLFileName);
		objXMLFile.MustExist();

 		String strWorkerClassName = jobdocFile.getName();
 		strWorkerClassName = strWorkerClassName.replaceAll("\\..*$","");
 		strWorkerClassName = javaClassName;
  
 		File objXSLFile = new File(templatePath,"JSJobDoc2JSOptionSuperClass.xsl");
 		pobjHshMap = new HashMap();
	 
 		setXSLTParameter("package_name", packageName);
 		setXSLTParameter("XSLTFilename", objXSLFile.getAbsolutePath());
 		                   
 		setXSLTParameter("default_lang", defaultLang);
 		                  		
 		if (standAlone) {
 		    setXSLTParameter("standalone", "true");
 		}else{
 	 		setXSLTParameter("standalone", "false");
 		 }
 		

		JSToolBox objTools = new JSToolBox();
		JSDataElementDate objDate = new JSDataElementDate(objTools.Now());
		objDate.setFormatPattern(JSDateFormat.dfTIMESTAMPS24);
		objDate.setParsePattern(JSDateFormat.dfTIMESTAMPS24);
		String strTimeStamp = objDate.FormattedValue();
		setXSLTParameter("timestamp", strTimeStamp);
		String strClassNameExtension = "OptionsSuperClass"; //$NON-NLS-1$

		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);
		setXSLTParameter(conXsltParmExtendsClassName, "JSOptionsClass");
		setXSLTParameter(conXsltParmVersion, "version");
		setXSLTParameter(conXsltParmSourceType, "options"); //$NON-NLS-1$
		setXSLTParameter(conXsltParmClassName, strWorkerClassName);
		setXSLTParameter(conXsltParmWorkerClassName, strWorkerClassName);
		setXSLTParameter("XMLDocuFilename", objXMLFile.getAbsolutePath());
		
 

 		objXMLFile.setParameters(pobjHshMap);
 		doTransform( objXSLFile, objXMLFile,new File(outputDir,strWorkerClassName+ strClassNameExtension+conJavaFilenameExtension));
 		

 		File objXSLOptionClassFile = new File(templatePath,"JSJobDoc2JSOptionClass.xsl"); //$NON-NLS-1$
 		setXSLTParameter("XSLTFilename", objXSLOptionClassFile.getAbsolutePath());
 		                  
 		setXSLTParameter(conXsltParmExtendsClassName, strWorkerClassName + strClassNameExtension);
		strClassNameExtension = "Options"; //$NON-NLS-1$
		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);

		setXSLTParameter(conXsltParmClassName, strWorkerClassName + strClassNameExtension);

		objXMLFile.setParameters(pobjHshMap);
		doTransform(objXSLOptionClassFile, objXMLFile,new File (outputDir,strWorkerClassName + strClassNameExtension + conJavaFilenameExtension));

		 
	 
 		File objXSLJSAdapterClassFile = new File(templatePath,"JSJobDoc2JSAdapterClass.xsl"); //$NON-NLS-1$
 		setXSLTParameter("XSLTFilename", objXSLJSAdapterClassFile.getAbsolutePath());
		setXSLTParameter(conXsltParmExtendsClassName, "JobSchedulerJob"); //$NON-NLS-1$
		strClassNameExtension = "JSAdapterClass"; //$NON-NLS-1$
		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);

		String strClassName = strWorkerClassName + strClassNameExtension;
		setXSLTParameter(conXsltParmClassName, strClassName);
		setXSLTParameter(conXsltParmWorkerClassName, strWorkerClassName);
		setXSLTParameter(conXsltParmSourceType, "JSJavaApiJob"); //$NON-NLS-1$
 
 		objXMLFile.setParameters(pobjHshMap);
        doTransform(objXSLJSAdapterClassFile, objXMLFile,new File (outputDir,strClassName + conJavaFilenameExtension));

		 
 
 		File objXSLJSWorkerClassFile = new File(templatePath,"JSJobDoc2JSWorkerClass.xsl"); //$NON-NLS-1$
 		setXSLTParameter("XSLTFilename", objXSLJSWorkerClassFile.getAbsolutePath());
		setXSLTParameter(conXsltParmExtendsClassName, "JSToolBox");
		strClassNameExtension = "";
		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);

		strClassName = strWorkerClassName + strClassNameExtension;
		setXSLTParameter(conXsltParmClassName, strClassName);
		setXSLTParameter(conXsltParmWorkerClassName, strWorkerClassName);

 		objXMLFile.setParameters(pobjHshMap);
        doTransform(objXSLJSWorkerClassFile, objXMLFile,new File (outputDir,strClassName.trim() + conJavaFilenameExtension));

		 
 		File objXSLJSMainClassFile = new File(templatePath,"JSJobDoc2JSMainClass.xsl"); //$NON-NLS-1$
 		setXSLTParameter("XSLTFilename", objXSLJSMainClassFile.getAbsolutePath());

		setXSLTParameter(conXsltParmExtendsClassName, "JSToolBox");
		strClassNameExtension = "Main";
		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);

		strClassName = strWorkerClassName + strClassNameExtension;
		setXSLTParameter(conXsltParmClassName, strClassName.trim());
		setXSLTParameter(conXsltParmWorkerClassName, strWorkerClassName.trim());
		setXSLTParameter(conXsltParmSourceType, "Main");
		
 		objXMLFile.setParameters(pobjHshMap);
        doTransform(objXSLJSMainClassFile, objXMLFile,new File (outputDir,strClassName.trim() + conJavaFilenameExtension));

		 
 		File objXSLJSJUnitClassFile = new File(templatePath,"JSJobDoc2JSJUnitClass.xsl"); //$NON-NLS-1$
 		setXSLTParameter("XSLTFilename", objXSLJSJUnitClassFile.getAbsolutePath());

		setXSLTParameter(conXsltParmExtendsClassName, "JSToolBox");
		strClassNameExtension = "JUnitTest";
		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);

		strClassName = strWorkerClassName + strClassNameExtension;
		setXSLTParameter(conXsltParmClassName, strClassName);
		setXSLTParameter(conXsltParmWorkerClassName, strWorkerClassName);
		setXSLTParameter(conXsltParmSourceType, "Junit");

 		objXMLFile.setParameters(pobjHshMap);
        doTransform(objXSLJSJUnitClassFile, objXMLFile,new File (outputDir,strClassName + conJavaFilenameExtension));

		 
  		File objXSLJSJUnitOptionSuperClassFile = new File(templatePath,"JSJobDoc2JSJUnitOptionSuperClass.xsl"); //$NON-NLS-1$
 		setXSLTParameter("XSLTFilename", objXSLJSJUnitOptionSuperClassFile.getAbsolutePath());

		setXSLTParameter(conXsltParmExtendsClassName, "JSToolBox");
		strClassNameExtension = "OptionsJUnitTest";
		setXSLTParameter(conXsltParmClassNameExtension, strClassNameExtension);

		strClassName = strWorkerClassName + strClassNameExtension;
		setXSLTParameter(conXsltParmClassName, strClassName);
		setXSLTParameter(conXsltParmWorkerClassName, strWorkerClassName);
		setXSLTParameter(conXsltParmSourceType, "Junit");

 		objXMLFile.setParameters(pobjHshMap);
        doTransform(objXSLJSJUnitOptionSuperClassFile, objXMLFile,new File (outputDir,strClassName + conJavaFilenameExtension));
 
	}
	catch (Exception e) {
		e.printStackTrace(System.err);		

	}
}


private void setXSLTParameter(final String strVarName, final String strVarValue) {
	final String conMethodName = conClassName + "::setXSLTParameter";
	
	String strV = strVarValue;
	String strX = String.format("%3$s: Set parameter '%1$s' to Value %2$s.", strVarName, strV, conMethodName);
	pobjHshMap.put(strVarName, strV);
}



private void doTransform(File objXSLFile,final JSXMLFile objXMLFile, File objOutFile) throws Exception {

	//File objOutFile = new File("c:\\temp","out.txt");
	//objOutFile.deleteOnExit();
	 

 	logger.debug("TargetFileName = " + objOutFile.getAbsolutePath()); //$NON-NLS-1$

	objXMLFile.Transform( objXSLFile,objOutFile);
	  
	String strGeneratedContent = getContent(objOutFile.getAbsolutePath());
	logger.info("Size of generated content is " + strGeneratedContent.length());
 
}

// TODO fix this in JSFile
private String getContent(final String strFileName) {

	// @SuppressWarnings("unused")
	// final String conMethodName = conClassName + "::getContent ";

	String strB = "";

	int filesize = 0;
	FileInputStream fin = null;
	try {
		fin = new FileInputStream(strFileName);
		final byte[] buffer = new byte[4000];
		while (true) {
			final int bytesRead = fin.read(buffer);
			if (bytesRead == -1) {
				break;
			}
			filesize += bytesRead;
			strB = strB + new String(buffer);
		}

	}
	catch (final IOException e) {
		System.err.println(e);
	}
	finally {
		try {
			if (fin != null) {
				fin.close();
			}
		}
		catch (final IOException e) {
		}
	}

	final String strT = strB.substring(0, filesize);
	return strT;
}  

public void setJobdocFile(File jobdocFile) {
	this.jobdocFile = jobdocFile;
}



public void setOutputDir(File outputDir) {
	this.outputDir = outputDir;
}



public void setPackageName(String packageName) {
	this.packageName = packageName;
}



public void setDefaultLang(String defaultLang) {
	this.defaultLang = defaultLang;
}



public void setStandAlone(boolean standAlone) {
	this.standAlone = standAlone;
}


public void setJavaClassName(String javaClassName) {
	this.javaClassName = javaClassName;
}

public void setTemplatePath(File templatePath) {
	this.templatePath = templatePath;
}


public static void main(String[] args) {
	SourceGenerator s = new SourceGenerator();
	s.setTemplatePath(new File("C:/Dokumente und Einstellungen/Uwe Risse/Eigene Dateien/sos-berlin.com/jobscheduler.1.3.9/scheduler_139/config/JOETemplates/java/xsl"));
	s.setDefaultLang("de");
	s.setJobdocFile(new File("c:\\temp\\job.xml"));
	s.setOutputDir(new File("c:\\temp\\out"));
	s.setJavaClassName("testClass");
	s.setPackageName("test");
	s.setStandAlone(true);

	s.execute();
}
}