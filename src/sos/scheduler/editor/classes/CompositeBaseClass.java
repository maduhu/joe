package sos.scheduler.editor.classes;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

import sos.scheduler.editor.app.Editor;
import sos.scheduler.editor.app.IContainer;
import sos.scheduler.editor.app.IUnsaved;
import sos.scheduler.editor.app.MainWindow;
import sos.scheduler.editor.app.ResourceManager;
import sos.scheduler.editor.conf.listeners.JOEListener;

/**
* \class FormBaseClass
*
* \brief FormBaseClass -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id: FormBaseClass.java 17417 2012-06-21 17:01:24Z ur $
* \see reference
*
* Created on 06.02.2012 16:23:36
 */

/**
 * @author KB
 *
 */
public abstract class CompositeBaseClass /* extends Composite */ implements IUnsaved {

	public final int				gconButtonStyle			= SWT.FLAT;
	//	public final int			gconFieldBorderConstant		= SWT.NONE;
	public final int				gconFieldBorderConstant	= SWT.BORDER;

	@SuppressWarnings("unused")
	private final String		conClassName	= this.getClass().getSimpleName();
	@SuppressWarnings("unused")
	private static final String	conSVNVersion	= "$Id$";
	private final Logger		logger			= Logger.getLogger(this.getClass());

	protected JOEListener			objJobDataProvider		= null;
	protected Composite				objParent				= null;
	protected Shell					shell					= null;
	protected Cursor				objLastCursor			= null;
	protected CompositeBaseClass	objParentForm			= this;

	//	protected CSSEngine			engine				= null;

	protected final int				intComboBoxStyle		= SWT.NONE;

	class localModifyListener implements ModifyListener {
		@Override
		public void modifyText(final ModifyEvent e) {
			setDirty();
		}
	}

	public final localModifyListener	objLocalModifyListener	= new localModifyListener();

	class localKeyListener extends KeyAdapter {

		@Override
		public void keyPressed(final KeyEvent e) {
			if (e.keyCode == SWT.CR) {
				applyInputFields(false);
			}
		}
	}

	public final localKeyListener	objLocalKeyListener	= new localKeyListener();

	public CompositeBaseClass() {
	}

	public CompositeBaseClass(final Composite pParentComposite, final int style) {
//		super(pParentComposite, style);
		objParent = pParentComposite;
		shell = pParentComposite.getShell();
		//		Display dis = shell.getDisplay();
		//		engine = new CSSSWTEngineImpl(dis);
		//		try {
		//			engine.parseStyleSheet(new StringReader("Label { color: blue }"));
		//		}
		//		catch (IOException e1) {
		//			// TODO Auto-generated catch block
		//			e1.printStackTrace();
		//		}
		//		engine.setErrorHandler(new CSSErrorHandler() {
		//		  @Override
		//		public void error(final Exception e) {
		//		    e.printStackTrace();
		//		  }
		//		});
	}

	//	public CSSEngine CSSEngine() {
	//		return engine;
	//	}
	//
	//	public void applyStyle() {
	//		if (engine != null) {
	//			engine.applyStyles(shell, /* applyStylesToChildNodes */true);
	//		}
	//	}

	public CompositeBaseClass(final Composite pParentComposite, final JOEListener pobjDataProvider) {
//		super(pParentComposite, SWT.NONE);
		objParent = pParentComposite;
		shell = pParentComposite.getShell();
		objJobDataProvider = pobjDataProvider;
		GridLayout grdL = new GridLayout();
		pParentComposite.setLayout(grdL);
		setResizableV(pParentComposite);
	}

	protected void setResizableV(final Control objControl) {
		boolean flgGrapVerticalspace = true;
		objControl.setLayoutData(new GridData(GridData.FILL, GridData.FILL, true, flgGrapVerticalspace));
	}

	protected void setStatusLine(final String pstrText) {
		final int delay = 2000;
		final Display display = shell.getDisplay();
		display.asyncExec(new Runnable() {
			@Override
			public void run() {
				Editor.objMainWindow.setStatusLine(pstrText);
				try {
					Thread.sleep(delay);
				}
				catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Editor.objMainWindow.setStatusLine("");
			}
		});

	}

	protected void showWaitCursor() {
		if (!shell.isDisposed()) {
			objLastCursor = shell.getCursor();
		}
		shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT));
	}

	protected void restoreCursor() {
		if (!shell.isDisposed())
			if (objLastCursor == null) {
				shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_ARROW));
			}
			else {
				shell.setCursor(objLastCursor);
			}
	}

	protected IContainer getContainer() {
		return MainWindow.getContainer();
	}

	protected void MsgWarning(final String pstrMsgText) {
		MainWindow.message(pstrMsgText, SWT.ICON_WARNING);
		this.setStatusLine(pstrMsgText);
	}

	protected void Enable(final Control objC, final boolean flgStatus) {
		if (objC != null) {
			objC.setEnabled(flgStatus);
		}
	}

//	@Override
	public Shell getShell() {
		return shell;
	}

	@Override
	public void apply() {
		if (isDirty() == true) {
			applyInputFields(false);
		}
	}

	@Override
	public boolean isUnsaved() {
		return isDirty();
	}

	protected abstract void applyInputFields(final boolean flgT);

	public boolean	flgIsDirty	= false;
	public boolean	init		= false;

	public void setDirty() {
		if (init == false) {
			flgIsDirty = true;
		}
	}

	public void setNotDirty() {
		if (init == false) {
			flgIsDirty = false;
		}
	}

	public boolean isDirty() {
		return flgIsDirty;
	}

////	@Override
//	protected void checkSubclass() {
//		// Disable the check that prevents subclassing of SWT components
//	}

	protected Group getGroup(final Composite objParent, final int intNoOfColumns) {
		final Group objG = new Group(objParent, SWT.None);
		final GridData gridData = new GridData(GridData.FILL, GridData.FILL, true, true);
		objG.setLayoutData(gridData);

		final GridLayout gridLayout_3 = new GridLayout();
		gridLayout_3.marginBottom = 0;
		gridLayout_3.marginTop = 0;
		gridLayout_3.numColumns = intNoOfColumns;
		objG.setLayout(gridLayout_3);

		objG.addListener(SWT.Resize, new Listener() {
			@Override
			public void handleEvent(final Event e) {
				objG.layout();
				return;
			}
		});

		return objG;
	}

	protected Composite getComposite(final Composite objParent, final int intNoOfColumns) {
		final Composite objG = new Composite(objParent, SWT.None);
		final GridData gridData = new GridData(GridData.FILL, GridData.FILL, true, true);
		objG.setLayoutData(gridData);

		final GridLayout gridLayout_3 = new GridLayout();
		gridLayout_3.marginBottom = 0;
		gridLayout_3.marginTop = 0;
		gridLayout_3.marginLeft = 0;
		gridLayout_3.marginRight = 0;

		gridLayout_3.numColumns = intNoOfColumns;
		gridLayout_3.makeColumnsEqualWidth = false;
		objG.setLayout(gridLayout_3);

		objG.addListener(SWT.Resize, new Listener() {
			@Override
			public void handleEvent(final Event e) {
				objG.layout();
				return;
			}
		});

		return objG;
	}

	protected Image getImage(final String pstrImageFileName) {
		Image objI = ResourceManager.getImageFromResource("/sos/scheduler/editor/icons/" + pstrImageFileName);

		return objI;
	}



}
