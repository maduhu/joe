package sos.scheduler.editor.classes;

import java.io.File;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.HelpEvent;
import org.eclipse.swt.events.HelpListener;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.VerifyEvent;
import org.eclipse.swt.events.VerifyListener;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;

import sos.scheduler.editor.app.ErrorLog;
import sos.scheduler.editor.app.MainWindow;
import sos.scheduler.editor.app.Messages;
import sos.scheduler.editor.app.Utils;
import sos.scheduler.editor.conf.forms.SchedulerEditorFontDialog;
import sos.scheduler.editor.conf.listeners.JOEListener;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.io.Files.JSFile;
import com.sos.VirtualFileSystem.shell.cmdShell;
import com.swtdesigner.SWTResourceManager;

/**
 * \class LanguageSelector
 *
 * \brief LanguageSelector -
 *
 * \details
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 25.08.2011 \see reference
 *
 * xml-syntax coloring:  https://github.com/vincent-zurczak/Xml-Region-Analyzer.git
 * http://vzurczak.wordpress.com/2012/09/07/xml-syntax-highlighting-with-a-styled-text/
 * see as an example: javalinestyler
 *
 * Created on 25.08.2011 13:54:32
 */

public class TextArea extends StyledText /* Text */{

	@SuppressWarnings("unused")
	private final String	conClassName			= "TextArea";

	@SuppressWarnings("unused")
	private static Logger	logger					= Logger.getLogger(TextArea.class);
	@SuppressWarnings("unused")
	private final String	conSVNVersion			= "$Id$";

	private WindowsSaver	objFormPosSizeHandler	= null;

	public static enum enuSourceTypes {
		ScriptSource, MonitorSource, xmlSource, xmlComment, JobDocu;
	}

	private String			strTagName			= "job";
	private String			strAttributeName	= "";

	private enuSourceTypes	enuWhatSourceType	= TextArea.enuSourceTypes.ScriptSource;
	// private Clipboard cb = null;

	boolean					flgInit				= false;

	public StyledText getControl() {
		return this;
	}

	private JOEListener	objDataProvider	= null;

	public void setFormHandler(final WindowsSaver pobjFormHandler) {
		objFormPosSizeHandler = pobjFormHandler;
	}

	public void setSourceType(final enuSourceTypes penuWhatSourceType) {
		enuWhatSourceType = penuWhatSourceType;
	}

	public void setDataProvider(final JOEListener pobjDataProvider, final enuSourceTypes penuWhatSourceType) {
		setSourceType(penuWhatSourceType);
		setDataProvider(pobjDataProvider);
	}

	public void setDataProvider(final JOEListener pobjDataProvider) {
		objDataProvider = pobjDataProvider;
		refreshContent();
		createContextMenue();
	}

	private void createContextMenue() {
		// Menu objContextMenu = new Menu(this);
		Menu objContextMenu = getMenu();
		if (objContextMenu == null) {
			objContextMenu = new Menu(this.getControl());
		}

		boolean flgIsEditable = getEditable();

		MenuItem itemCopy = new MenuItem(objContextMenu, SWT.PUSH);
		itemCopy.addListener(SWT.Selection, getCopyListener());
		itemCopy.setText("Copy");

		if (flgIsEditable) {
			MenuItem itemCut = new MenuItem(objContextMenu, SWT.PUSH);
			itemCut.addListener(SWT.Selection, getCutListener());
			itemCut.setText("Cut");

			MenuItem itemPaste = new MenuItem(objContextMenu, SWT.PUSH);
			itemPaste.addListener(SWT.Selection, getPasteListener());
			itemPaste.setText("Paste");
		}

		MenuItem itemSelectAll = new MenuItem(objContextMenu, SWT.PUSH);
		itemSelectAll.addListener(SWT.Selection, getSelectAllListener());
		itemSelectAll.setText("Select all");

		new MenuItem(objContextMenu, SWT.SEPARATOR);

		MenuItem itemStartExternalEditor = new MenuItem(objContextMenu, SWT.PUSH);
		itemStartExternalEditor.addListener(SWT.Selection, getStartExternalEditorListener());
		itemStartExternalEditor.setText("Start external Editor");
		setMenu(objContextMenu);

		MenuItem itemSelectFont = new MenuItem(objContextMenu, SWT.PUSH);
		itemSelectFont.addListener(SWT.Selection, getSelectFontListener());
		itemSelectFont.setText("Select Font");

		new MenuItem(objContextMenu, SWT.SEPARATOR);

		MenuItem itemSaveAs = new MenuItem(objContextMenu, SWT.PUSH);
		itemSaveAs.addListener(SWT.Selection, getSaveAsListener());
		itemSaveAs.setText("Save as ...");

		if (flgIsEditable) {
			// TODO die letzten 10 Files als Submenue
			MenuItem itemReadFrom = new MenuItem(objContextMenu, SWT.PUSH);
			itemReadFrom.addListener(SWT.Selection, getReadFileListener());
			itemReadFrom.setText("Read from ...");

			MenuItem itemInsertFrom = new MenuItem(objContextMenu, SWT.PUSH);
			itemInsertFrom.addListener(SWT.Selection, getInsertFileListener());
			itemInsertFrom.setText("Insert from ...");
		}
	}

	@SuppressWarnings("unused")
	private Listener getSaveAsListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("save as was pressed....");
				saveFile();
			}
		};
	}

	private Listener getStartExternalEditorListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				startExternalEditor();
			}

		};
	}

	public void startExternalEditor() {
		String text = getText();
		switch (enuWhatSourceType) {
			case xmlSource:
				try {
					JSFile objTempF = new JSFile(File.createTempFile("SOS-JOE", ".xml").getAbsolutePath());
					objTempF.Write(text);
					cmdShell objShell = new cmdShell();
					// TODO Option for external Editor
					String strCommandString = String.format("uedit32.exe \"%1$s\"", objTempF);
					objShell.setCommand(strCommandString);
					objShell.run();
				}
				catch (Exception e) {
					throw new JobSchedulerException(e);
				}
				return;

			default:
				break;
		}
		if (enuWhatSourceType != enuSourceTypes.ScriptSource) {
			String strT = "job";
			if (enuWhatSourceType == enuSourceTypes.MonitorSource) {
				strT = "monitor";
			}
			String lan = "function_" + strT + "_" + objDataProvider.getLanguageAsString() + "_";
			text = Utils.showClipboard(text, getShell(), true, "", true, lan, false);
		}
		else {
			text = Utils.showClipboard(text, getShell(), true, "");
		}
		if (text != null) {
			setText(text);
		}
	}

	private Listener getSelectFontListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("'Select Font' was pressed....");
				changeFont();
			}
		};
	}

	private Listener getReadFileListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("getReadFileListener was pressed....");
				doReadFile();
			}
		};
	}

	private Listener getInsertFileListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("getInsertFileListener was pressed....");
				doInsertFile();
			}
		};
	}

	private Listener getCopyListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("getCopyListener was pressed....");
				_copy();
			}
		};
	}

	private Listener getPasteListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("getCopyListener was pressed....");
				_paste();
			}
		};
	}

	private Listener getCutListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("getCopyListener was pressed....");
				_cut();
			}
		};
	}

	private Listener getSelectAllListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {
				logger.debug("getSelectAllListener was pressed....");
				_selectAll();
			}
		};
	}

	private void _copy() {
		this.copy();
	}

	private void _paste() {
		this.paste();
	}

	private void _cut() {
		this.cut();
	}

	private void _selectAll() {
		this.selectAll();
	}

	public void refreshContent() {

		flgInit = true;
		switch (enuWhatSourceType) {
			case ScriptSource:
				setText(objDataProvider.getSource());
				strTagName = "job";
				strAttributeName = "script";
				break;

			case xmlSource:
				String strT = objDataProvider.getXML();
				strT = strT.replaceAll("\\n\\n", System.getProperty("line.separator"));
				setText(strT);
				strTagName = "job";
				strAttributeName = "script";
				break;

			case MonitorSource:
				setText(objDataProvider.getSource());
				strTagName = "job";
				strAttributeName = "Monitor";
				break;

			case xmlComment:
				setText(objDataProvider.getComment());
				strTagName = "job";
				strAttributeName = "comment";
				break;

			case JobDocu:
				setText(objDataProvider.getDescription());
				strTagName = "job";
				strAttributeName = "documentation";
				break;

			default:
				break;
		}

		SchedulerEditorFontDialog objFontDialog = new SchedulerEditorFontDialog(getFont().getFontData()[0], getForeground().getRGB());

		objFontDialog.readFontData();
		setFont(objFontDialog.getFontData(), objFontDialog.getForeGround());

		flgInit = false;
	}

	public TextArea(final Composite pobjComposite, final int arg1) {
		super(pobjComposite, arg1);

		addVerifyListener(new VerifyListener() {
			@Override
			public void verifyText(final VerifyEvent e) {
				// if (objDataProvider.isNotEmpty(e.text) &&
				// languageSelector.isJava() &&
				// objDataProvider.isNotEmpty(tbxClassName.getText())) {
				// MainWindow.message("Please remove first Classname.",
				// SWT.ICON_WARNING);
				// e.doit = false;
				// return;
				// }
			}
		});

		/*
		 * addListener(SWT.MenuDetect, new Listener() { public void
		 * handleEvent(Event event) {
		 *
		 * StyledText s = (StyledText)event.widget;
		 *
		 * Menu menu = new Menu (s.getShell(), SWT.POP_UP);
		 *
		 * MenuItem item = new MenuItem (menu, SWT.PUSH);
		 * item.setText("Click here");
		 *
		 * s.setMenu(menu); menu.setVisible(true); event.doit = false; } });
		 */
		addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(final MouseEvent event) {
				if (event.button == 3) {
					logger.debug("button2");
				}
			}

			@Override
			public void mouseDown(final MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(final MouseEvent arg0) {
				// startExternalEditor();
			}
		});

		addHelpListener(new HelpListener() {
			@Override
			public void helpRequested(final HelpEvent objHelpEvent) {
				MainWindow.message(Messages.getString("OrderJob.Help"), SWT.ICON_INFORMATION);
			}
		});

		addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(final KeyEvent e) {
				if (objDataProvider.Check4HelpKey(e.keyCode, strTagName, strAttributeName)) {
					e.doit = false;
					return;
				}

				/*
				 * getClipBoard();
				 *
				 * if (e.stateMask == SWT.CTRL) { if (e.keyCode == 97) { //
				 * Ctrl-A Select all setSelection(0, getText().length()); e.doit
				 * = false; return; }
				 *
				 * if (e.keyCode == 99) { // Ctrl-C Copy String strT =
				 * getSelectionText(); TextTransfer textTransfer =
				 * TextTransfer.getInstance(); cb.setContents(new Object[] {
				 * strT }, new Transfer[] { textTransfer }); e.doit = false;
				 * return; }
				 *
				 * if (e.keyCode == 118) { // Ctrl-V Paste TextTransfer transfer
				 * = TextTransfer.getInstance(); String data = (String)
				 * cb.getContents(transfer); if (data != null) { insert(data);
				 * e.doit = false; return; } } }
				 */
				e.doit = true;
				return;
			}
		});

		final GridData gridData_1 = new GridData(GridData.FILL, GridData.FILL, true, true, 4, 1);
		gridData_1.minimumHeight = 40;
		gridData_1.widthHint = 454;
		gridData_1.heightHint = 139;
		setLayoutData(gridData_1);

		addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(final ModifyEvent e) {

				if (flgInit == false) {
					switch (enuWhatSourceType) {
						case ScriptSource:
							objDataProvider.setSource(getText());
							break;

						case MonitorSource:
							objDataProvider.setSource(getText());
							break;

						case xmlSource:
							// setText(objDataProvider.getXML());
							break;

						case xmlComment:
							objDataProvider.setComment(getText());
							break;

						case JobDocu:
							objDataProvider.setDescription(getText());
							break;

						default:
							break;
					}
				}
			}
		});
	}

	/*
	 * private Clipboard getClipBoard() { if (cb == null) { cb = new
	 * Clipboard(getDisplay()); } return cb; }
	 */
	public void setFont(final FontData f, final RGB foreGround) {
		SWTResourceManager.getFont(f.getLocale(), f.getHeight(), f.getStyle());
		//		setFont(new Fon t(this.getDisplay(), f));
		setFont(SWTResourceManager.getFont(f.getLocale(), f.getHeight(), f.getStyle()));
//		setForeground(new Co lor(this.getDisplay(), foreGround));
		setForeground(SWTResourceManager.getColor(foreGround));
	}

	public void changeFont() {
		SchedulerEditorFontDialog fd = new SchedulerEditorFontDialog(getFont().getFontData()[0], getForeground().getRGB());
		fd.setParent(getShell());
		fd.show(getDisplay());
		setFont(fd.getFontData(), fd.getForeGround());
	}

	private void doReadFile() {
		String strFileName = doSelectFile("LastSelectedFile4Read");
		String strContent = null;
		if ((strContent = getFileContent(strFileName)) != null) {
			setText(strContent);
		}
	}

	private void doInsertFile() {
		String strFileName = doSelectFile("LastSelectedFile4Insert");
		String strContent = null;
		if ((strContent = getFileContent(strFileName)) != null) {
			this.insert(strContent);
		}
	}

	private String getFileContent(final String pstrFileName) {
		String strContent = null;
		if (pstrFileName != null) {
			JSFile objFile = new JSFile(pstrFileName);
			strContent = objFile.getContent();
		}
		return strContent;
	}

	private String doSelectFile(final String pstrLRUKey) {
		String strSelectedFileName = "";
		try {
			FileDialog fdialog = new FileDialog(MainWindow.getSShell(), SWT.OPEN);
			if (objFormPosSizeHandler != null) {
				fdialog.setFilterPath(objFormPosSizeHandler.getProperty(pstrLRUKey));
			}
			if ((strSelectedFileName = fdialog.open()) == null) {
				return strSelectedFileName;
			}
			if (objFormPosSizeHandler != null) {
				objFormPosSizeHandler.saveProperty(pstrLRUKey, strSelectedFileName);
			}
			return strSelectedFileName;
		}
		catch (Exception e) {
			try {
				new ErrorLog(String.format("error selecting file '%1$s'", strSelectedFileName), e);
			}
			catch (Exception ee) {
			}
			return null;
		}
	}

	private boolean saveFile() {
		String strFilename4Save = "";
		try {
			FileDialog fdialog = new FileDialog(MainWindow.getSShell(), SWT.SAVE);
			if (objFormPosSizeHandler != null) {
				fdialog.setFilterPath(objFormPosSizeHandler.getProperty("LastSelectedFile4Save"));
			}
			//			strFilename4Save = fdialog.open();
			if ((strFilename4Save = fdialog.open()) == null) {
				return false;
			}
			JSFile objFile = new JSFile(strFilename4Save);
			if (objFile.exists()) {
				String strM = Messages.getString("MainListener.doFileOverwrite") + ": " + strFilename4Save;
				int ok = MainWindow.message(strM, SWT.ICON_QUESTION | SWT.YES | SWT.NO);
				if (ok == SWT.NO) {
					return false;
				}
				if (!objFile.canWrite()) {
					strM = Messages.getString("MainListener.fileWriteProtected") + ":" + strFilename4Save;
					MainWindow.message(strM, SWT.ICON_WARNING | SWT.OK);
					return false;
				}
			}
			objFile.WriteLine(getText());
			objFile.close();
			if (objFormPosSizeHandler != null) {
				objFormPosSizeHandler.saveProperty("LastSelectedFile4Save", strFilename4Save);
			}
			return true;
		}
		catch (Exception e) {
			try {
				new ErrorLog(String.format("error saving file '%1$s'", strFilename4Save), e);
			}
			catch (Exception ee) {
			}
			return false;
		}
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
}
