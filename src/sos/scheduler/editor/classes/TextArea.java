package sos.scheduler.editor.classes;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.dnd.Clipboard;
import org.eclipse.swt.dnd.TextTransfer;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.events.HelpEvent;
import org.eclipse.swt.events.HelpListener;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.VerifyEvent;
import org.eclipse.swt.events.VerifyListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;

import sos.scheduler.editor.app.MainWindow;
import sos.scheduler.editor.app.Messages;
import sos.scheduler.editor.app.Utils;
import sos.scheduler.editor.conf.forms.SchedulerEditorFontDialog;
import sos.scheduler.editor.conf.listeners.JOEListener;

/**
* \class LanguageSelector 
* 
* \brief LanguageSelector - 
* 
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 25.08.2011
* \see reference
*
* Created on 25.08.2011 13:54:32
 */

public class TextArea extends StyledText /* Text */{

	@SuppressWarnings("unused")
	private final String	conClassName	= "LanguageSelector";

	private static Logger	logger			= Logger.getLogger(TextArea.class);
	@SuppressWarnings("unused")
	private final String	conSVNVersion	= "$Id$";

	public static enum enuSourceTypes {
		ScriptSource, MonitorSource, xmlSource, xmlComment, JobDocu;
	}

	private String			strTagName			= "job";
	private String			strAttributeName	= "";

	private enuSourceTypes	enuWhatSourceType	= TextArea.enuSourceTypes.ScriptSource;
	private Clipboard		cb					= null;

	boolean					flgInit				= false;

	// public Text getControl() {
	// return this;
	// }

	public StyledText getControl() {
		return this;
	}

//	private JobListener	objDataProvider	= null;
	private JOEListener	objDataProvider	= null;

	public void setSourceType(final enuSourceTypes penuWhatSourceType) {
		enuWhatSourceType = penuWhatSourceType;
	}

	public void setDataProvider(final JOEListener pobjDataProvider, final enuSourceTypes penuWhatSourceType) {
		setSourceType(penuWhatSourceType);
		setDataProvider(pobjDataProvider);
	}

	public void setDataProvider(final JOEListener pobjDataProvider) {
		objDataProvider = pobjDataProvider;
		refreshContent();
		createContextMenue();
	}

	private void createContextMenue() {
		// Menu objContextMenu = new Menu(this);
		Menu objContextMenu = getMenu();
		if (objContextMenu == null) {
			objContextMenu = new Menu(this.getControl());
		}

	/*	MenuItem itemSaveAs = new MenuItem(objContextMenu, SWT.PUSH);
		itemSaveAs.addListener(SWT.Selection, getSaveAsListener());
		itemSaveAs.setText("Save as ...");

		MenuItem itemReadFrom = new MenuItem(objContextMenu, SWT.PUSH);
		itemReadFrom.addListener(SWT.Selection, getReadFileListener());
		itemReadFrom.setText("Read from ...");
*/
		MenuItem itemSelectFont = new MenuItem(objContextMenu, SWT.PUSH);
		itemSelectFont.addListener(SWT.Selection, getSelectFontListener());
		itemSelectFont.setText("Select Font");
/*
		MenuItem itemStartExternalEditor = new MenuItem(objContextMenu, SWT.PUSH);
		itemStartExternalEditor.addListener(SWT.Selection, getStartExternalEditorListener());
		itemStartExternalEditor.setText("Start external Editor");
*/
		setMenu(objContextMenu);
		// objContextMenu.setVisible(true);
	}

	private Listener getSaveAsListener() {

		return new Listener() {
			public void handleEvent(Event e) {
				System.out.println("save as was pressed....");
			}
		};
	}

	private Listener getStartExternalEditorListener() {

		return new Listener() {
			public void handleEvent(Event e) {
				System.out.println("'External Editor' was pressed....");
				StartExternalEditor();
			}

		};
	}

	public void StartExternalEditor() {
		String text = getText();
		if (enuWhatSourceType != enuSourceTypes.ScriptSource) {
			String strT = "job";
			if (enuWhatSourceType == enuSourceTypes.MonitorSource) {
				strT = "monitor";
			}
			String lan = "function_" + strT + "_" + objDataProvider.getLanguage(objDataProvider.getLanguage()) + "_";
			text = Utils.showClipboard(text, getShell(), true, "", true, lan, false);
		}
		else {
			text = Utils.showClipboard(text, getShell(), true, "");
		}
		if (text != null) {
			setText(text);
		}
	}

	private Listener getSelectFontListener() {

		return new Listener() {
			public void handleEvent(Event e) {
				System.out.println("'Select Font' was pressed....");
				changeFont();
			}
		};
	}

	private Listener getReadFileListener() {

		return new Listener() {
			public void handleEvent(Event e) {
				System.out.println("ReadFile was pressed....");
			}
		};
	}

	public void refreshContent() {

		flgInit = true;
		switch (enuWhatSourceType) {
			case ScriptSource:
				setText(objDataProvider.getSource());
				strTagName = "job";
				strAttributeName = "script";
				break;

			case xmlSource:
				setText(objDataProvider.getXML());
				strTagName = "job";
				strAttributeName = "script";
				break;

			case MonitorSource:
				setText(objDataProvider.getSource());
				strTagName = "job";
				strAttributeName = "Monitor";
				break;

			case xmlComment:
				setText(objDataProvider.getComment());
				strTagName = "job";
				strAttributeName = "comment";
				break;

			case JobDocu:
				setText(objDataProvider.getDescription());
				strTagName = "job";
				strAttributeName = "documentation";
				break;

			default:
				break;
		}

		SchedulerEditorFontDialog objFontDialog = new SchedulerEditorFontDialog(getFont().getFontData()[0], getForeground().getRGB());

		objFontDialog.readFontData();
		setFont(objFontDialog.getFontData(), objFontDialog.getForeGround());

		flgInit = false;
	}

	public TextArea(Composite pobjComposite, int arg1) {
		super(pobjComposite, arg1);

		addVerifyListener(new VerifyListener() {
			public void verifyText(final VerifyEvent e) {
				// if (objDataProvider.isNotEmpty(e.text) && languageSelector.isJava() &&
				// objDataProvider.isNotEmpty(tbxClassName.getText())) {
				// MainWindow.message("Please remove first Classname.", SWT.ICON_WARNING);
				// e.doit = false;
				// return;
				// }
			}
		});

		/*
		addListener(SWT.MenuDetect, new Listener() {
			public void handleEvent(Event event) {

			    StyledText s = (StyledText)event.widget;

			        Menu menu = new Menu (s.getShell(), SWT.POP_UP);

			        MenuItem item = new MenuItem (menu, SWT.PUSH);
			        item.setText("Click here");

			    s.setMenu(menu);
			    menu.setVisible(true);          
			    event.doit = false;
			}
		});
		
		*/
		addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent event) {
				if (event.button == 3) {
					System.out.println("button2");
				}
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
				// StartExternalEditor();
			}
		});

		addHelpListener(new HelpListener() {
			@Override
			public void helpRequested(HelpEvent objHelpEvent) {
				MainWindow.message(Messages.getString("OrderJob.Help"), SWT.ICON_INFORMATION);
			}
		});

		addKeyListener(new KeyAdapter() {
			public void keyPressed(final KeyEvent e) {
				if (objDataProvider.Check4HelpKey(e.keyCode, strTagName, strAttributeName)) {
					e.doit = false;
					return;
				}

				getClipBoard();

				if (e.stateMask == SWT.CTRL) {
					if (e.keyCode == 97) { // Ctrl-A Select all
						setSelection(0, getText().length());
						e.doit = false;
						return;
					}

					if (e.keyCode == 99) { // Ctrl-C Copy
						String strT = getSelectionText();
						TextTransfer textTransfer = TextTransfer.getInstance();
						cb.setContents(new Object[] { strT }, new Transfer[] { textTransfer });
						e.doit = false;
						return;
					}

					if (e.keyCode == 118) { // Ctrl-V Paste
						TextTransfer transfer = TextTransfer.getInstance();
						String data = (String) cb.getContents(transfer);
						if (data != null) {
							insert(data);
							e.doit = false;
							return;
						}
					}
				}
				e.doit = true;
				return;
			}
		});

		final GridData gridData_1 = new GridData(GridData.FILL, GridData.FILL, true, true, 4, 1);
		gridData_1.minimumHeight = 40;
		gridData_1.widthHint = 454;
		gridData_1.heightHint = 139;
		setLayoutData(gridData_1);

		addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {

				if (flgInit == false) {
					switch (enuWhatSourceType) {
						case ScriptSource:
							objDataProvider.setSource(getText());
							break;

						case MonitorSource:
							objDataProvider.setSource(getText());
							break;

						case xmlSource:
							// setText(objDataProvider.getXML());
							break;

						case xmlComment:
							objDataProvider.setComment(getText());
							break;

						case JobDocu:
							objDataProvider.setDescription(getText());
							break;

						default:
							break;
					}
				}
			}
		});

	}

	private Clipboard getClipBoard() {
		if (cb == null) {
			cb = new Clipboard(getDisplay());
		}
		return cb;
	}

	public void setFont(FontData f, RGB foreGround) {
		setFont(new Font(this.getDisplay(), f));
		setForeground(new Color(this.getDisplay(), foreGround));
	}

	public void changeFont() {
		SchedulerEditorFontDialog fd = new SchedulerEditorFontDialog(getFont().getFontData()[0], getForeground().getRGB());
		fd.setParent(getShell());
		fd.show(getDisplay());
		setFont(fd.getFontData(), fd.getForeGround());
	}

	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
}
