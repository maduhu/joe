package sos.scheduler.editor.classes;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import sos.scheduler.editor.app.Editor;
import sos.scheduler.editor.app.IContainer;
import sos.scheduler.editor.app.MainWindow;
import sos.scheduler.editor.conf.listeners.JOEListener;

/**
* \class FormBaseClass
*
* \brief FormBaseClass -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 06.02.2012 16:23:36
 */

/**
 * @author KB
 *
 */
public class FormBaseClass {

	@SuppressWarnings("unused")
	private final String		conClassName		= "FormBaseClass";
	@SuppressWarnings("unused")
	private static final String	conSVNVersion		= "$Id$";
	private static final Logger	logger				= Logger.getLogger(FormBaseClass.class);

	protected JOEListener		objJobDataProvider	= null;
	protected Composite			objParent			= null;
	protected Shell				shell				= null;
	protected Cursor			objLastCursor		= null;
	protected FormBaseClass		objParentForm		= this;

//	protected CSSEngine			engine				= null;

	protected final int			intComboBoxStyle	= SWT.NONE;

	public FormBaseClass(final Composite parent, final int style) {
		//		super(parent, style);
		shell = parent.getShell();
		//		Display dis = shell.getDisplay();
		//		engine = new CSSSWTEngineImpl(dis);
		//		try {
		//			engine.parseStyleSheet(new StringReader("Label { color: blue }"));
		//		}
		//		catch (IOException e1) {
		//			// TODO Auto-generated catch block
		//			e1.printStackTrace();
		//		}
		//		engine.setErrorHandler(new CSSErrorHandler() {
		//		  @Override
		//		public void error(final Exception e) {
		//		    e.printStackTrace();
		//		  }
		//		});
	}

//	public CSSEngine CSSEngine() {
//		return engine;
//	}
//
//	public void applyStyle() {
//		if (engine != null) {
//			engine.applyStyles(shell, /* applyStylesToChildNodes */true);
//		}
//	}

	public FormBaseClass(final Composite pParentComposite, final JOEListener pobjDataProvider) {
		//		super(pParentComposite, SWT.NONE);
		objParent = pParentComposite;
		shell = pParentComposite.getShell();
		objJobDataProvider = pobjDataProvider;
		GridLayout grdL = new GridLayout();
		pParentComposite.setLayout(grdL);
		setResizableV(pParentComposite);
	}

	protected void setResizableV(final Control objControl) {
		boolean flgGrapVerticalspace = true;
		objControl.setLayoutData(new GridData(GridData.FILL, GridData.FILL, true, flgGrapVerticalspace));
	}

	protected void setStatusLine(final String pstrText) {
		final int delay = 2000;
		final Display display = shell.getDisplay();
		display.asyncExec(new Runnable() {
			@Override
			public void run() {
				Editor.objMainWindow.setStatusLine(pstrText);
				try {
					Thread.sleep(delay);
				}
				catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Editor.objMainWindow.setStatusLine("");
			}
		});

	}

	protected void showWaitCursor() {
		if (!shell.isDisposed()) {
			objLastCursor = shell.getCursor();
		}
		shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT));
	}

	protected void restoreCursor() {
		if (!shell.isDisposed())
			if (objLastCursor == null) {
				shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_ARROW));
			}
			else {
				shell.setCursor(objLastCursor);
			}
	}

	protected IContainer getContainer() {
		return MainWindow.getContainer();
	}

	protected void MsgWarning(final String pstrMsgText) {
		MainWindow.message(pstrMsgText, SWT.ICON_WARNING);
		this.setStatusLine(pstrMsgText);
	}

	protected void Enable(final Control objC, final boolean flgStatus) {
		if (objC != null) {
			objC.setEnabled(flgStatus);
		}
	}

	public Shell getShell() {
		return shell;
	}
}
