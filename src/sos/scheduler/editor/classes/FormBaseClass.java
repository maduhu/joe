package sos.scheduler.editor.classes;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

import sos.scheduler.editor.app.MainWindow;

import com.sos.dialog.classes.WindowsSaver;
import com.sos.joe.interfaces.IContainer;

/**
* \class FormBaseClass
*
* \brief FormBaseClass -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 06.02.2012 16:23:36
 */

/**
 * @author KB
 *
 */
public abstract class FormBaseClass  <DataProviderClass> {

	@SuppressWarnings("unused")
	private final String		conClassName			= this.getClass().getSimpleName();
	@SuppressWarnings("unused")
	private final Logger		logger					= Logger.getLogger(this.getClass());

	@SuppressWarnings("unused")
	private static final String	conSVNVersion			= "$Id$";

	protected WindowsSaver		objFormPosSizeHandler	= null;

	protected DataProviderClass		objJobDataProvider		= null;
	protected Composite			objParent				= null;
	protected Shell				shell					= null;
	protected Cursor			objLastCursor			= null;
	protected FormBaseClass<DataProviderClass>		objParentForm			= this;

	//	protected CSSEngine			engine				= null;

	protected final int			intComboBoxStyle		= SWT.NONE;

	public FormBaseClass() {
	}

	public FormBaseClass(final Composite parent, final int style) {
		//		super(parent, style);
		shell = parent.getShell();
		//		Display dis = shell.getDisplay();
		//		engine = new CSSSWTEngineImpl(dis);
		//		try {
		//			engine.parseStyleSheet(new StringReader("Label { color: blue }"));
		//		}
		//		catch (IOException e1) {
		//			// TODO Auto-generated catch block
		//			e1.printStackTrace();
		//		}
		//		engine.setErrorHandler(new CSSErrorHandler() {
		//		  @Override
		//		public void error(final Exception e) {
		//		    e.printStackTrace();
		//		  }
		//		});
	}

	//	public CSSEngine CSSEngine() {
	//		return engine;
	//	}
	//
	//	public void applyStyle() {
	//		if (engine != null) {
	//			engine.applyStyles(shell, /* applyStylesToChildNodes */true);
	//		}
	//	}

	public void setParentComposite(final Composite pParentComposite, final DataProviderClass pobjDataProvider) {
		objParent = pParentComposite;
		shell = pParentComposite.getShell();
		GridLayout grdL = new GridLayout();
		pParentComposite.setLayout(grdL);
		setResizableV(pParentComposite);
		objJobDataProvider = pobjDataProvider;
	}

	public FormBaseClass(final Composite pParentComposite, final DataProviderClass pobjDataProvider) {
		setParentComposite(pParentComposite, pobjDataProvider);
	}

	protected void setResizableV(final Control objControl) {
		boolean flgGrapVerticalspace = true;
		objControl.setLayoutData(new GridData(GridData.FILL, GridData.FILL, true, flgGrapVerticalspace));
	}

	protected boolean hasText (final Text pobjText) {
		String strT = pobjText.getText().trim();
		return strT.length() > 0;
	}

	protected void setStatusLine(final String pstrText) {
		final int delay = 2000;
		final Display display = shell.getDisplay();
		display.asyncExec(new Runnable() {
			@Override
			public void run() {
				MainWindow.setStatusLine(pstrText);
				try {
					Thread.sleep(delay);
				}
				catch (InterruptedException e) {
					e.printStackTrace();
				}
				MainWindow.setStatusLine("");
			}
		});

	}

	protected void showWaitCursor() {
		if (!shell.isDisposed()) {
			objLastCursor = shell.getCursor();
		}
		shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT));
	}

	protected void restoreCursor() {
		if (!shell.isDisposed())
			if (objLastCursor == null) {
				shell.setCursor(new Cursor(shell.getDisplay(), SWT.CURSOR_ARROW));
			}
			else {
				shell.setCursor(objLastCursor);
			}
	}

	protected IContainer getContainer() {
		return MainWindow.getContainer();
	}

	protected void MsgWarning(final String pstrMsgText) {
		MainWindow.message(pstrMsgText, SWT.ICON_WARNING);
		this.setStatusLine(pstrMsgText);
	}

	protected void Enable(final Control objC, final boolean flgStatus) {
		if (objC != null) {
			objC.setEnabled(flgStatus);
		}
	}

	public Shell getShell() {
		return shell;
	}

	public void apply() {
		// if (isUnsaved())
		// addParam();
	}

	public boolean isUnsaved() {
		return false;
	}

	public void refreshContent() {
	}


	protected void saveWindowPosAndSize() {
		objFormPosSizeHandler.saveWindow();
	}


	public abstract void createGroup();
}
