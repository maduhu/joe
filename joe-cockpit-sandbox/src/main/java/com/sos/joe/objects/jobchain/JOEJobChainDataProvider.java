package com.sos.joe.objects.jobchain;
import java.util.List;

import org.apache.log4j.Logger;
import org.jdom.Element;

import sos.scheduler.editor.app.JSObjectElement;
import sos.scheduler.editor.conf.listeners.JOEListener;

import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.joe.globals.JOEConstants;
import com.sos.joe.xml.Utils;
import com.sos.scheduler.model.objects.JSObjBase;
import com.sos.scheduler.model.objects.JSObjJobChain;
import com.sos.scheduler.model.objects.JobChain.FileOrderSink;
import com.sos.scheduler.model.objects.JobChain.JobChainNode;

/**
* \class JOEListener
*
* \brief JOEListener -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 16.11.2011 15:25:39
 */
/**
 * @author KB
 *
 */
public class JOEJobChainDataProvider extends JOEListener {
	@SuppressWarnings("unused")
	private final String			conClassName				= this.getClass().getSimpleName();
	@SuppressWarnings("unused")
	private static final String		conSVNVersion				= "$Id$";
	@SuppressWarnings("unused")
	private final Logger			logger						= Logger.getLogger(this.getClass());
	public static final String		conTagFILE_ORDER_SINK		= "file_order_sink";
	protected Element				objJobChain					= null;
	public static final String		conAttrSTATE				= "state";
	public static final String		conTagJOB_CHAIN_NODE		= "job_chain_node";
	public static final String		conAttrON_ERROR				= "on_error";
	public static final String		conAttrERROR_STATE			= "error_state";
	public static final String		conAttrJOBNAME				= "job_name";
	public static final String		conTagFILE_ORDER_SOURCE		= "file_order_source";
	public static final String		conAttrMAX					= "max";
	public static final String		conAttrDIRECTORY			= "directory";
	public static final String		conAttrREGEX				= "regex";
	public static final String		conAttrNEXT_STATE			= "next_state";
	public static final String		conAttrREPEAT				= "repeat";
	public static final String		conAttrDELAY_AFTER_ERROR	= "delay_after_error";
	protected Element				_config						= null;
	protected JobChainNodeWrapper	objJobChainNode						= null;
	protected String[]				strCurrentStates						= null;
	protected JSObjectElement		objJSObjectElement			= null;

	public JOEJobChainDataProvider() {
		strUpdateObjectType = "job_chain";
		strUpdateElementName = getChainName();
	}

	public JOEJobChainDataProvider(final JSObjJobChain pobjJobChain) {
		objJSJobChain = pobjJobChain;
		strUpdateObjectType = "job_chain";
		strUpdateElementName = getChainName();
	}

	@Deprecated
	public JSObjectElement getJSObject() {
		if (objJSObjectElement == null) {
			objJSObjectElement = new JSObjectElement(JOEConstants.JOB_CHAIN, objJobChain);
		}
		return objJSObjectElement;
	}

//	public Element getChainElement() {
//		return objJobChain;
//	}
//
//	private void setAttrYesNo(final String pstrAttr, final boolean pflgValue) {
//		setAttr(pstrAttr, getBoolYesNo(pflgValue));
//	}

	public boolean getRecoverable() {
		return objJSJobChain.isRecoverable();
	}

//	@Deprecated private void setAttr(final String pstrAttr, final String pstrVal) {
//		Utils.setAttribute(pstrAttr, pstrVal, objJobChain);
//		setDirty();
//	}

//	@Deprecated private String getAttr(final String pstrAttr) {
//		String strValue = Utils.getAttributeValue(pstrAttr, objJobChain);
//		return strValue;
//	}
//
	public JOEJobChainDataProvider setTitle(final String pstrTitle) {
		objJSJobChain.setTitle(pstrTitle);
		return this;
	}

	public void setChainName(final String name) {
		setName(name);
	}

	public String getState() {
		return objJobChainNode.getState();
	}

	public JobChainNodeWrapper getNewJobChainNode() {
		JobChainNode node = new JobChainNode();
		JobChainNodeWrapper objN = getJobChainNodeWrapper(node);
		objJSJobChain.getJobChainNodeList().add(node);
		return objN;
	}

	public JobChainNodeWrapper getNewFileOrderSinkNode() {
		FileOrderSink node = new FileOrderSink();
		JobChainNodeWrapper objN = getJobChainNodeWrapper(node);
		objJSJobChain.getFileOrderSinkList().add(node);
		return objN;
	}

	public JobChainNodeWrapper getAJobChainNode() {
		JobChainNode node = new JobChainNode();
		JobChainNodeWrapper objN = getJobChainNodeWrapper(node);
		return objN;
	}

	public JobChainNodeWrapper getAFileOrderSinkNode() {
		FileOrderSink node = new FileOrderSink();
		JobChainNodeWrapper objN = getJobChainNodeWrapper(node);
		return objN;
	}

	public List<FileOrderSink> getFileOrderSinkList() {
		return objJSJobChain.getFileOrderSinkList();
	}

	public String getDelay() {
		return objJobChainNode.getDelay();
	}

	public void setState(final String state) {
		objJobChainNode.setState(state);
	}

	public void setDelay(final String strDelay) {
		objJobChainNode.setDelay(strDelay);
	}

	public String getJob() {
		return objJobChainNode.getJobName();
	}

	public void setJob(final String strJobName) {
		objJobChainNode.setJobName(strJobName);
	}

	public String getNextState() {
		return objJobChainNode.getNextState();
	}

	public void setNextState(final String state) {
		objJobChainNode.setNextState(state);
	}

	public String getErrorState() {
		String strR = "";
		if (objJobChainNode != null) {
			strR = objJobChainNode.getErrorState();
		}
		return strR;
	}

	public void setErrorState(final String state) {
		objJobChainNode.setErrorState(state);
	}

	public String getOnError() {
		return objJobChainNode.getOnError();
	}

	public void setOnError(final String strOnError) {
		objJobChainNode.setOnError(strOnError);
	}

	@Deprecated
	public JobChainNodeWrapper getJobChainNodeWrapper (final Element pobjElement) {
		return new JobChainNodeWrapper();
	}
	
	public JobChainNodeWrapper getJobChainNodeWrapper(final JSObjBase pobjNode) {
		JobChainNodeWrapper objN = new JobChainNodeWrapper(pobjNode);
		objN.setChainName(getJobChainName());
		return objN;
	}

	public String getMoveTo() {
		return objJobChainNode.getMoveTo();
	}

	public boolean getRemoveFile() {
		return objJobChainNode.getRemoveFileB();
	}

	public void setMoveTo(final String moveTo) {
		objJobChainNode.setMoveTo(moveTo);
	}

	public void setRemoveFile(final String removeFile) {
		objJobChainNode.setRemoveFile(removeFile);
	}

	public void setRemoveFile(final boolean pflgRemoveFile) {
		objJobChainNode.setRemoveFileB(pflgRemoveFile);
		setDirty();
	}

	public JOEJobChainDataProvider setName(final String pstrName) {
		objJSJobChain.setName(pstrName);
		return this;
	}

	public String getName() {
		return objJSJobChain.getName();
	}

	public String getTitle() {
		return objJSJobChain.getTitle();
	}

	// TODO in JSJobChain implementieren
	public String getJobChainNameAndTitle() {
		String strT = getChainName() + " - " + getTitle();
		return strT;
	}

	public String getJobChainName() {
		String strT = getChainName();
		return strT;
	}

	public String getVisibleText() {
		return getTitle();
	}

	public String getMaxOrders() {
		return objJSJobChain.getMaxOrders();
	}

	public void setRecoverable(final boolean pflgIsOrdersRecoverable) {
		objJSJobChain.setOrdersRecoverable(pflgIsOrdersRecoverable);
	}

	public int intMaxOrders() {
		int i = objJSJobChain.getmaxOrders();
		return i;
	}

	public void setMaxorders(final int maxOrder) {
		objJSJobChain.setMaxorders(maxOrder);
	}

	public JOEJobChainDataProvider setOrdersRecoverable(final boolean pflgorders_recoverable) {
		objJSJobChain.setOrdersRecoverable(pflgorders_recoverable);
		return this;
	}

	public JOEJobChainDataProvider setOrdersRecoverable(final String pstrorders_recoverable) {
		objJSJobChain.setOrdersRecoverable(pstrorders_recoverable);
		return this;
	}

	public JOEJobChainDataProvider setVisible(final boolean pflgIsVisible) {
		objJSJobChain.setVisible(pflgIsVisible);
		return this;
	}

	public boolean getVisible() {
		return objJSJobChain.isVisible();
	}

	public JOEJobChainDataProvider setVisible(final String pstrIsVisible) {
		objJSJobChain.setVisible(pstrIsVisible);
		return this;
	}

	public boolean isDistributed() {
		return objJSJobChain.isDistributed();
	}

	public void setDistributed(final boolean pflgIsDistributed) {
		objJSJobChain.setDistributed(pflgIsDistributed);
		setDirty();
	}

	public JOEJobChainDataProvider setDistributed(final String pstrDistributed) {
		objJSJobChain.setVisible(pstrDistributed);
		return this;
	}

	public String getChainName() {
		String strT = "???";
				strT = objJSJobChain.getObjectName();
		return strT;
	}

	// ein Job Chain hat entweder job_chain_node ODER job_chain_node.job_chain
	// Kindknoten.
	public boolean hasNodesOrChains() {
		if (objJSJobChain.getJobChainNodeList().size() > 0) {
			return true;
		}
		else {
			return false;
		}
	}

	public void getJOMxJobChain() {
		getJobSchedulerObjectFactory();
		if (objJSJobChain == null) {
			String strFileName = _dom.getFilename();
			String strJobChainName = Utils.getAttributeValue("name", objJobChain);
			//getChainName();
			strFileName = strFileName + "/" + strJobChainName;
			strFileName = strFileName + JSObjJobChain.fileNameExtension; // ".job_chain.xml";
			ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strFileName);
			if (objFile != null) {
				objJSJobChain = new JSObjJobChain(JobSchedulerObjectFactory, objFile);
			}
		}
	}

	public JobChainNodeWrapper getNode() {
		return objJobChainNode;
	}

	public void clearNode() {
		logger.debug("_node set to null");
		objJobChainNode = null;
	}

	public JobChainNodeWrapper setNode(final JobChainNodeWrapper pobjNode) {
		objJobChainNode = pobjNode;
		return objJobChainNode;
	}

	public JobChainNodeWrapper setNodeIfNull(final JobChainNodeWrapper pobjNode) {
		if (objJobChainNode == null) {
			setNode(pobjNode);
		}
		//		logger.debug("_node set to null");
		return objJobChainNode;
	}

	public JobChainNodeWrapper setNode(final Object pobjNode) {
		//		logger.debug("_node set to null");
		objJobChainNode = (JobChainNodeWrapper) pobjNode;
		return objJobChainNode;
	}

	@Override protected void setDirty() {
		super.setDirty();
		/**
		 * reload the content of the jobchain, this must be performed until the JOM is used only.
		 */
//		objJSJobChain = null;
//		getJOMJobChain();
	}

	public boolean isFullNode() {
		return getNode().isJobNode();
	}

	public boolean isFileSinkNode() {
		return getNode().isFileSinkNode();
	}

	// TODO implement in JSObjJobChain
	public boolean isUniqueState(final String state) {
		if (strCurrentStates != null) {
			for (int i = 0; i < strCurrentStates.length; i++) {
				if (strCurrentStates[i].equalsIgnoreCase(state) && !strCurrentStates[i].equals(getState())) {
					return false;
				}
			}
		}
		return true;
	}
}
