package sos.scheduler.editor.classes;

import java.io.File;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Text;

import sos.scheduler.editor.app.JOEMainWindow;

import com.sos.joe.globals.options.Options;
import com.sos.joe.objects.job.JobListener;
import com.sos.joe.xml.IOUtils;

/**
* \class FileNameSelector
*
* \brief FileNameSelector -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \see reference
*
 */

public class FileNameSelector extends Text {
	@SuppressWarnings("unused") private final String conClassName = this.getClass().getSimpleName();
	@SuppressWarnings("unused") private static final String conSVNVersion = "$Id$";
	@SuppressWarnings("unused") private final Logger logger = Logger.getLogger(this.getClass());
	
// TODO consolidate with SOSDialog
	
	private JobListener		objDataProvider			= null;
	@SuppressWarnings("unused")
	private boolean			flgInit					= false;
	public boolean			flgIsFileFromLiveFolder	= false;

	private String			strFileName				= "";

	public String getFileName() {
		return strFileName;
	}

	public void setDataProvider(final JobListener pobjDataProvider) {
		objDataProvider = pobjDataProvider;
		refreshContent();

		Menu objContextMenu = getMenu();
		if (objContextMenu == null) {
			objContextMenu = new Menu(getShell(), SWT.POP_UP);
		}

		MenuItem item = new MenuItem(objContextMenu, SWT.PUSH);
		item.addListener(SWT.Selection, getSaveAsListener());
		item.setText("Save as ...");
		MenuItem item2 = new MenuItem(objContextMenu, SWT.PUSH);
		item2.addListener(SWT.Selection, getOpenListener());
		item2.setText("Open File");
	}

	private Listener getSaveAsListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {

			}
		};
	}

	private Listener getOpenListener() {

		return new Listener() {
			@Override
			public void handleEvent(final Event e) {

			}
		};
	}

	private FocusAdapter getFocusAdapter() {
		return new FocusAdapter() {
			@Override
			public void focusGained(final FocusEvent e) {
				selectAll();
			}

			@Override
			public void focusLost(final FocusEvent e) {

			}
		};
	}

	private MouseListener getMouseListener() {
		return new MouseListener() {
			@Override
			public void mouseUp(final MouseEvent arg0) {
			}

			@Override
			public void mouseDown(final MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(final MouseEvent arg0) {
				String strT = "";
				strFileName = strT;
				if (flgIsFileFromLiveFolder) {
					String strLiveFolderName = Options.getSchedulerHotFolder();
					strT = IOUtils.openDirectoryFile("*.*", strLiveFolderName);
					if (objDataProvider.isNotEmpty(strT)) {
						File objFile = new File(strLiveFolderName, strT);
						setText(objFile.getName());
					}
				}
				else {
					String strLastFolderName = Options.getLastIncludeFolderName();
					strT = IOUtils.openDirectoryFile("*.*", strLastFolderName);

					if (objDataProvider.isNotEmpty(strT)) {
						File objFile = new File(strT);
						if (objFile.canRead()) {
							setText(objFile.getAbsoluteFile().toString());
							if (flgIsFileFromLiveFolder == false) {
								Options.setLastIncludeFolderName(objFile.getParent());
							}
							strFileName = strT;
							setText(objFile.getName());
							// evtl. ein CallBack einbauen ...
							// applyFile2Include();
						}
						else {
							JOEMainWindow.ErrMsg(String.format("File '%1$s' not found or is not readable", strT));
						}
					}
				}
			}
		};

	}

	public void refreshContent() {

		flgInit = true;
		// switch (enuWhatSourceType) {
		// case ScriptSource:
		// setText(objDataProvider.getSource());
		// break;
		//
		// case xmlSource:
		// setText(objDataProvider.getXML());
		// break;
		//
		// default:
		// break;
		// }

		flgInit = false;

	}

	public FileNameSelector(final Composite pobjComposite, final int arg1) {
		super(pobjComposite, arg1);

		addFocusListener(getFocusAdapter());
		setLayoutData(new GridData(GridData.FILL, GridData.CENTER, true, false));
		addMouseListener(getMouseListener());
	}

	@Override
	protected void checkSubclass() {
		
		// Disable the check that prevents subclassing of SWT components
	}
}
